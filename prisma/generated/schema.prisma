generator client {
  provider = "prisma-client-js"
  output   = "./generated"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String        @unique(map: "users_unique_name")
  nickname      String        @unique(map: "users_unique_nickname")
  username      String        @unique(map: "users_unique_username")
  password      String        @unique(map: "users_unique_password")
  pinNumber     String        @unique(map: "users_unique_pin_number") @map("pin_number")
  phoneNumber   String        @unique(map: "users_unique_phone_number") @map("phone_number")
  userAddresses UserAddress[]

  @@map("users")
}

model TaxCert {
  id            Int         @id @default(autoincrement())
  userAddressId Int         @map("user_address_id")
  taxCertJson   Json        @unique(map: "tax_certs_unique") @map("tax_cert_json")
  userAddress   UserAddress @relation(fields: [userAddressId], references: [id], onDelete: Cascade)

  @@map("tax_certs")
}

model Address {
  id                Int           @id @default(autoincrement())
  latitude          Float         @db.DoublePrecision
  longitude         Float         @db.DoublePrecision
  legalDistrictCode String        @map("legal_district_code")
  dong              String?
  ho                String?
  userAddresses     UserAddress[]

  @@unique([latitude, longitude], map: "addresses_coordinate")
  @@map("addresses")
}

model UserAddress {
  id               Int              @id @default(autoincrement())
  userId           String           @map("user_id") @db.Uuid
  addressId        Int              @map("address_id")
  createdAt        DateTime         @default(now()) @map("created_at") @db.Timestamptz(6)
  nickname         String?
  realEstates      RealEstate[]
  stepResults      StepResult[]
  primaryAddresses PrimaryAddress[]
  taxCerts         TaxCert[]
  user             User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  address          Address          @relation(fields: [addressId], references: [id], onDelete: Cascade)

  @@map("user_addresses")
}

model RealEstate {
  id             Int         @id @default(autoincrement())
  userAddressId  Int         @map("user_address_id")
  realEstateJson Json?       @map("real_estate_json")
  userAddress    UserAddress @relation(fields: [userAddressId], references: [id], onDelete: Cascade)

  @@map("real_estates")
}

model Step {
  id          Int          @id @default(autoincrement())
  mainNum     Int          @map("main_num")
  subNum      Int          @map("sub_num")
  stepResults StepResult[]

  @@map("steps")
}

model StepResult {
  id            Int         @id @default(autoincrement())
  userAddressId Int         @map("user_address_id")
  stepId        Int         @map("step_id")
  mismatch      Int?
  match         Int?
  unchecked     Int?
  createdAt     DateTime    @default(now()) @map("created_at") @db.Timestamptz(6)
  step          Step        @relation(fields: [stepId], references: [id], onDelete: Cascade)
  userAddress   UserAddress @relation(fields: [userAddressId], references: [id], onDelete: Cascade)

  @@map("step_results")
}

model PrimaryAddress {
  id            Int         @id @default(autoincrement())
  userAddressId Int         @map("user_address_id")
  userAddress   UserAddress @relation(fields: [userAddressId], references: [id], onDelete: Cascade)

  @@map("primary_addresses")
}
